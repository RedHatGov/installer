package airgap

import (

        "fmt"
	//"os"
	//"github.com/ghodss/yaml"
	"github.com/openshift/installer/pkg/asset"
	//"github.com/openshift/installer/pkg/types"

)

const (
	airgapConfigFilename = "airgap-config.yaml"
)

type AirgapPackage struct {
        File   *asset.File          `json:"file"`
	url    string
}

var _ asset.WritableAsset = (*AirgapPackage)(nil)


// Files returns the files generated by the asset.
func (a *AirgapPackage) Files() []*asset.File {
        if a.File != nil {
                return []*asset.File{a.File}
        }
        return []*asset.File{}
}

// Load returns the installconfig from disk.
func (a *AirgapPackage) Load(f asset.FileFetcher) (found bool, err error) {

	//file, err := f.FetchByName(airgapConfigFilename)
	//if err != nil {
	//	if os.IsNotExist(err) {
	//		return false, nil
	//	}
	//	return false, err
	//}

	//config := &types.AirgapConfig{}
	//if err := yaml.Unmarshal(file.Data, config); err != nil {
	//	return false, err
	//}

	//fmt.Printf("Downloading RHCOS for architecture [%v]\n", config.Rhcos.Architecture)

	rhcosMeta := &rhcosReleaseMetaData{}
	//mirrorRelease := &mirrorReleaseMetaData{}
	//isoImage      := &isoImageMetaData{}


	rhcosMeta.createAirgapPackage(".", "vmware")
	//mirrorRelease.pullMirrorImages(config)
	//mirrorRelease.extractInstaller(config)
	//isoImage.createISOImage(config.Ocpdistribution.Destdir, config.Ocpdistribution.Isofile)

	return true, nil
}

func (a *AirgapPackage) Generate(parents asset.Parents) error {
        //rhcosRelease := &rhcosReleaseMetaData{}

        fmt.Println("Airgap Generate is being called")
	//parents.Get(
	//	rhcosRelease,
	//)
	////rhcosMetaData = &rhcosReleaseMetaData{}

	//rhcosRelease.Generate(parents)

        return nil
}

// Dependencies returns no dependencies.
func (a *AirgapPackage) Dependencies() []asset.Asset {
	return []asset.Asset{
		&rhcosReleaseMetaData{},
	}
        fmt.Println("In the deps")
	return nil
}

// Name returns the human-friendly name of the asset.
func (a *AirgapPackage) Name() string {
	return "Airgap Package"
}
